// <auto-generated />
using System;
using Examen.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infra.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240415035040_testmigration")]
    partial class testmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<DateTime>("dateEmbauche")
                        .HasColumnType("datetime2");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentId");

                    b.ToTable("agents");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Locataire", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("TypeLocataire")
                        .HasColumnType("int");

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAdhesion")
                        .HasColumnType("datetime2");

                    b.Property<int>("pointBonus")
                        .HasColumnType("int");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("AgentId");

                    b.ToTable("locataires");

                    b.HasDiscriminator<int>("TypeLocataire").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Reservation", b =>
                {
                    b.Property<DateTime>("dateReservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("vehiculeKey")
                        .HasColumnType("int");

                    b.Property<int>("locataireKey")
                        .HasColumnType("int");

                    b.Property<int>("dureeJour")
                        .HasColumnType("int");

                    b.HasKey("dateReservation", "vehiculeKey", "locataireKey");

                    b.HasIndex("locataireKey");

                    b.HasIndex("vehiculeKey");

                    b.ToTable("reservationes");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Vehicule", b =>
                {
                    b.Property<int>("vehiculeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vehiculeId"));

                    b.Property<string>("couleur")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("kilometrage")
                        .HasColumnType("int");

                    b.Property<double>("prixJour")
                        .HasColumnType("float");

                    b.HasKey("vehiculeId");

                    b.ToTable("vehicules");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Entreprise", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Locataire");

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Personne", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Locataire");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Locataire", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Agent", "agent")
                        .WithMany("locataires")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agent");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Reservation", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Locataire", "locataire")
                        .WithMany("reservations")
                        .HasForeignKey("locataireKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Vehicule", "vehicule")
                        .WithMany("reservations")
                        .HasForeignKey("vehiculeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("locataire");

                    b.Navigation("vehicule");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Agent", b =>
                {
                    b.Navigation("locataires");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Locataire", b =>
                {
                    b.Navigation("reservations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Vehicule", b =>
                {
                    b.Navigation("reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
